<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    /* Added Tahoma font */
    body {
      font-family: "Tahoma", sans-serif;
    }
    .tab-active {
      background-color: #3b82f6; /* blue-600 */
      color: white;
    }
    /* Simple spinner */
    .spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #3b82f6;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Modal styles */
    .modal {
      transition: opacity 0.25s ease;
    }
    .modal-content {
      transition: transform 0.25s ease;
      transform: translateY(-20px);
    }
    .modal.show {
      opacity: 1;
      pointer-events: auto;
    }
    .modal.show .modal-content {
      transform: translateY(0);
    }
    
    /* Custom focus styles for inputs */
    input:focus,
    select:focus,
    textarea:focus {
      outline: none;
      border-color: #3b82f6; /* blue-500 */
      box-shadow: 0 0 0 2px #bfdbfe; /* blue-200 */
    }
    
    /* Uppercase inputs */
    .uppercase-input {
      text-transform: uppercase;
    }
    .uppercase-input::placeholder {
      text-transform: none;
    }

    /* Capitalize input - will be handled by JavaScript for smart capitalization */
    .capitalize-input {
      /* No CSS transform, handled by JS to preserve Roman numerals */
    }

    /* **NEW:** Class for the sticky subheader (search) */
    .sticky-subheader {
      position: sticky;
      top: 49px; /* Height of the main tabs */
      z-index: 9; /* Below main tabs but above content */
      background-color: white;
    }

  </style>
</head>
<body class="bg-gray-100">

  <div class="p-6">
    <!-- Tab Navigation - Made sticky -->
    <!-- **FIX:** Added shadow-md and z-20 -->
    <div class="bg-white rounded-t-lg shadow-md sticky top-0 z-20">
      <div class="flex border-b">
        <button onclick="switchTab('dashboard')" id="tab-dashboard" 
                class="tab-active px-6 py-3 font-medium transition">
          Dashboard
        </button>
        <button onclick="switchTab('pending')" id="tab-pending" 
                class="px-6 py-3 font-medium text-gray-600 hover:bg-gray-50 transition">
          Pending <span id="pendingCount" class="ml-2 px-2 py-1 bg-yellow-500 text-white text-xs rounded-full">0</span>
        </button>
        <button onclick="switchTab('approved')" id="tab-approved" 
                class="px-6 py-3 font-medium text-gray-600 hover:bg-gray-50 transition">
          Approved & Print
        </button>
        <button onclick="switchTab('history')" id="tab-history"
                class="px-6 py-3 font-medium text-gray-600 hover:bg-gray-50 transition">
          Request History
        </button>
        <button onclick="switchTab('settings')" id="tab-settings"
                class="px-6 py-3 font-medium text-gray-600 hover:bg-gray-50 transition">
          Settings
        </button>
      </div>
    </div>
    
    <!-- Tab Content Container -->
    <!-- **FIX:** Removed rounded-b-lg and shadow from here -->
    <div class="bg-white">
      
      <!-- Dashboard Tab -->
      <!-- **FIX:** Added back p-6 for padding -->
      <div id="content-dashboard" class="tab-content p-6">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">Dashboard Overview</h2>
        
        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
          <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-5 shadow-sm">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-yellow-700 font-medium">Pending Requests</p>
                <p id="stat-pending" class="text-3xl font-bold text-yellow-800">0</p>
              </div>
              <div class="bg-yellow-100 rounded-full p-3">
                <svg class="w-8 h-8 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
          </div>
          
          <div class="bg-green-50 border border-green-200 rounded-lg p-5 shadow-sm">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-green-700 font-medium">Approved</p>
                <p id="stat-approved" class="text-3xl font-bold text-green-800">0</p>
              </div>
              <div class="bg-green-100 rounded-full p-3">
                <svg class="w-8 h-8 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
          </div>
          
          <div class="bg-red-50 border border-red-200 rounded-lg p-5 shadow-sm">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-red-700 font-medium">Rejected</p>
                <p id="stat-rejected" class="text-3xl font-bold text-red-800">0</p>
              </div>
              <div class="bg-red-100 rounded-full p-3">
                <svg class="w-8 h-8 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
          </div>
        </div>
        
        <!-- **NEW:** Date-based Stats -->
        <h2 class="text-xl font-bold text-gray-800 mb-4">Requests by Period</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-5 shadow-sm">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-blue-700 font-medium">Today's Requests</p>
                <p id="stat-today" class="text-3xl font-bold text-blue-800">0</p>
              </div>
              <div class="bg-blue-100 rounded-full p-3">
                <svg class="w-8 h-8 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
              </div>
            </div>
          </div>
          
          <div class="bg-purple-50 border border-purple-200 rounded-lg p-5 shadow-sm">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-purple-700 font-medium">This Month's Requests</p>
                <p id="stat-month" class="text-3xl font-bold text-purple-800">0</p>
              </div>
              <div class="bg-purple-100 rounded-full p-3">
                <svg class="w-8 h-8 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
                </svg>
              </div>
            </div>
          </div>
          
          <div class="bg-indigo-50 border border-indigo-200 rounded-lg p-5 shadow-sm">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-indigo-700 font-medium">This Year's Requests</p>
                <p id="stat-year" class="text-3xl font-bold text-indigo-800">0</p>
              </div>
              <div class="bg-indigo-100 rounded-full p-3">
                <svg class="w-8 h-8 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H7a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
                </svg>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Top Offices -->
        <div>
          <h3 class="text-lg font-semibold text-gray-800 mb-4">Top 5 Requesting Offices</h3>
          <div id="topOffices" class="space-y-2">
            <!-- Will be populated dynamically -->
          </div>
        </div>
      </div>
      
      <!-- Pending Tab -->
      <div id="content-pending" class="tab-content hidden">
        <!-- **NEW:** Sticky Subheader for Search -->
        <div class="sticky-subheader flex justify-between items-center p-6 border-b">
          <h2 class="text-2xl font-bold text-gray-800">Pending Requests</h2>
          <div class="relative w-full md:w-1/3">
            <input type="text" id="searchInput" onkeyup="filterPendingRequests()" placeholder="Search by name, office, purpose..."
                   class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
            <svg class="w-5 h-5 text-gray-400 absolute right-3 top-1/2 -translate-y-1/2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
        </div>
        <!-- **FIX:** Added p-6 for padding -->
        <div id="pendingRequests" class="space-y-4 p-6">
          <!-- Will be populated dynamically -->
        </div>
      </div>
      
      <!-- Approved & Print Tab -->
      <div id="content-approved" class="tab-content hidden">
        <!-- **NEW:** Sticky Subheader for Search -->
        <div class="sticky-subheader flex justify-between items-center p-6 border-b">
          <h2 class="text-2xl font-bold text-gray-800">Approved Requests</h2>
          <div class="relative w-full md:w-1/3">
            <input type="text" id="approvedSearchInput" onkeyup="filterApprovedRequests()" placeholder="Search by name, office, reg no..."
                   class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
            <svg class="w-5 h-5 text-gray-400 absolute right-3 top-1/2 -translate-y-1/2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
        </div>
        <!-- **FIX:** Added p-6 for padding -->
        <div id="approvedRequests" class="space-y-4 p-6">
          <!-- Will be populated dynamically -->
        </div>
      </div>
      
      <!-- Request History Tab -->
      <div id="content-history" class="tab-content hidden">
        <!-- Sticky Subheader for Search -->
        <div class="sticky-subheader flex justify-between items-center p-6 border-b">
          <h2 class="text-2xl font-bold text-gray-800">Request History</h2>
          <div class="relative w-full md:w-1/3">
            <input type="text" id="historySearchInput" onkeyup="filterHistoryRequests()" placeholder="Search by name, status, office..."
                   class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
            <svg class="w-5 h-5 text-gray-400 absolute right-3 top-1/2 -translate-y-1/2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
        </div>
        <div class="p-6 overflow-x-auto">
          <table id="historyTable" class="min-w-full bg-white border border-gray-200 rounded-lg">
            <thead class="bg-gray-50 border-b border-gray-200">
              <tr>
                <th class="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Reg No</th>
                <th class="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Name</th>
                <th class="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Position</th>
                <th class="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Office</th>
                <th class="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Dates</th>
                <th class="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Status</th>
                <th class="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Requested</th>
                <th class="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Action By</th>
              </tr>
            </thead>
            <tbody id="historyTableBody">
              <!-- Will be populated dynamically -->
            </tbody>
          </table>
          <div id="noHistoryRequests" class="hidden text-gray-500 text-center py-8">No requests found</div>
        </div>
      </div>

      <!-- Settings Tab -->
      <!-- **FIX:** Added back p-6 for padding -->
      <div id="content-settings" class="tab-content hidden p-6">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">Settings</h2>
        
        <div class="bg-gray-50 p-6 rounded-lg max-w-2xl">
          <h3 class="text-lg font-semibold text-gray-800 mb-4">Update Signatory</h3>
          
          <form id="signatoryForm" onsubmit="handleSignatoryUpdate(event)">
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Signatory Name</label>
                <input type="text" id="signatoryName" required
                       class="w-full px-3 py-2 border border-gray-300 rounded-md uppercase-input">
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Position/Title</label>
                <textarea id="signatoryPosition" required rows="3"
                       class="w-full px-3 py-2 border border-gray-300 rounded-md resize-vertical"></textarea>
                <p class="text-xs text-gray-500 mt-1">You can enter multiple lines if needed</p>
              </div>
              
              <div id="settingsMessage" class="hidden"></div>
              
              <button type="submit" 
                      class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition shadow-sm">
                Update Signatory
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="hidden modal fixed inset-0 bg-gray-900 bg-opacity-50 backdrop-blur-sm flex items-center justify-center z-50 opacity-0 pointer-events-none">
    <div class="bg-white p-6 rounded-lg shadow-xl text-center">
      <div class="spinner mx-auto mb-4"></div>
      <p id="loadingText" class="text-gray-700 font-medium">Loading...</p>
    </div>
  </div>
  
  <!-- Success Modal -->
  <div id="successModal" class="hidden modal fixed inset-0 bg-gray-900 bg-opacity-50 backdrop-blur-sm flex items-center justify-center z-50 opacity-0 pointer-events-none">
    <div class="modal-content bg-white p-6 rounded-lg shadow-xl max-w-sm w-full mx-4">
      <div class="text-center">
        <svg class="w-16 h-16 text-green-500 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <h3 id="successTitle" class="text-xl font-bold text-gray-800 mb-2">Success!</h3>
        <p id="successMessage" class="text-gray-600 mb-6">Operation completed successfully.</p>
        <button onclick="closeModal('successModal')" 
                class="w-full px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition">
          OK
        </button>
      </div>
    </div>
  </div>
  
  <!-- Error Modal -->
  <div id="errorModal" class="hidden modal fixed inset-0 bg-gray-900 bg-opacity-50 backdrop-blur-sm flex items-center justify-center z-50 opacity-0 pointer-events-none">
    <div class="modal-content bg-white p-6 rounded-lg shadow-xl max-w-sm w-full mx-4">
      <div class="text-center">
        <svg class="w-16 h-16 text-red-500 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <h3 id="errorTitle" class="text-xl font-bold text-gray-800 mb-2">Error!</h3>
        <p id="errorMessage" class="text-gray-600 mb-6">An unexpected error occurred.</p>
        <button onclick="closeModal('errorModal')" 
                class="w-full px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition">
          Close
        </button>
      </div>
    </div>
  </div>

  <!-- Confirm Modal -->
  <div id="confirmModal" class="hidden modal fixed inset-0 bg-gray-900 bg-opacity-50 backdrop-blur-sm flex items-center justify-center z-50 opacity-0 pointer-events-none">
    <div class="modal-content bg-white p-6 rounded-lg shadow-xl max-w-sm w-full mx-4">
      <div class="text-center">
        <svg class="w-16 h-16 text-yellow-500 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
        </svg>
        <h3 id="confirmTitle" class="text-xl font-bold text-gray-800 mb-2">Are you sure?</h3>
        <p id="confirmMessage" class="text-gray-600 mb-6">Do you really want to proceed?</p>
        <div class="flex justify-center space-x-4">
          <button id="confirmCancelBtn" onclick="closeModal('confirmModal')" 
                  class="w-full px-6 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition">
            Cancel
          </button>
          <button id="confirmOkBtn"
                  class="w-full px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition">
            Confirm
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Edit Modal -->
  <div id="editModal" class="hidden modal fixed inset-0 bg-gray-900 bg-opacity-60 backdrop-blur-sm flex items-center justify-center z-40 opacity-0 pointer-events-none">
    <!-- **FIX:** Changed structure for non-sticky header/footer and scrolling content -->
    <div class="modal-content bg-white rounded-lg shadow-xl max-w-3xl w-full mx-4 max-h-[90vh] flex flex-col">
      <form id="editForm" onsubmit="handleUpdateRequest(event)" class="flex flex-col overflow-hidden h-full">
        <!-- Modal Header -->
        <!-- **FIX:** Removed sticky classes, added flex-shrink-0 -->
        <div class="flex justify-between items-center p-6 border-b flex-shrink-0">
          <h3 class="text-xl font-bold text-gray-800">Edit Pending Request</h3>
          <button type="button" onclick="closeModal('editModal')" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <!-- Hidden input for rowNumber and timestamp -->
        <input type="hidden" id="editRowNumber" name="rowNumber">
        <input type="hidden" id="editTimestamp" name="timestamp">
        
        <!-- Form Content -->
        <!-- **FIX:** Added overflow-y-auto, p-6 -->
        <div class="space-y-4 p-6 overflow-y-auto">
          
          <!-- **NEW:** Added Date Requested Info -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Date Requested</label>
            <!-- **FIX:** Removed italic and text-green-600 -->
            <input type="text" id="editRequestDate" class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-100 font-medium" disabled>
          </div>
          
          <h4 class="text-md font-semibold text-gray-700 border-b pb-1">Personal Information</h4>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Last Name <span class="text-red-500">*</span></label>
              <input type="text" id="editLastName" name="lastName" required 
                     class="w-full px-3 py-2 border border-gray-300 rounded-lg uppercase-input">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">First Name <span class="text-red-500">*</span></label>
              <input type="text" id="editFirstName" name="firstName" required 
                     class="w-full px-3 py-2 border border-gray-300 rounded-lg uppercase-input">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Middle Initial</label>
              <input type="text" id="editMiddleInitial" name="middleInitial" maxlength="2"
                     class="w-full px-3 py-2 border border-gray-300 rounded-lg uppercase-input">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Suffix</label>
              <input type="text" id="editSuffix" name="suffix" placeholder="Jr., Sr., III"
                     class="w-full px-3 py-2 border border-gray-300 rounded-lg uppercase-input">
            </div>
          </div>
          
          <h4 class="text-md font-semibold text-gray-700 border-b pb-1 pt-2">Work Details</h4>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Position <span class="text-red-500">*</span></label>
              <input type="text" id="editPosition" name="position" required
                     class="w-full px-3 py-2 border border-gray-300 rounded-lg capitalize-input"
                     oninput="smartCapitalize(this)">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Office <span class="text-red-500">*</span></label>
              <select id="editOffice" name="office" required onchange="handleEditOfficeChange()"
                      class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-white">
                <option value="">-- Select Office --</option>
              </select>
            </div>
          </div>
          <div id="editCustomOfficeContainer" class="hidden pt-2">
            <label class="block text-sm font-medium text-gray-700 mb-1">Specify Office <span class="text-red-500">*</span></label>
            <input type="text" id="editCustomOffice" name="customOffice"
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg uppercase-input">
          </div>
          
          <h4 class="text-md font-semibold text-gray-700 border-b pb-1 pt-2">Period of Appearance</h4>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Start Date <span class="text-red-500">*</span></label>
              <!-- Max date will be set by JS -->
              <input type="date" id="editStartDate" name="startDate" required onchange="validateEditDates()"
                     class="w-full px-3 py-2 border border-gray-300 rounded-lg">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">End Date <span class="text-red-500">*</span></label>
              <!-- Max date will be set by JS -->
              <input type="date" id="editEndDate" name="endDate" required onchange="validateEditDates()"
                     class="w-full px-3 py-2 border border-gray-300 rounded-lg">
            </div>
          </div>
          <p id="editDateError" class="text-red-500 text-sm mt-2 hidden"></p>
          
          <h4 class="text-md font-semibold text-gray-700 border-b pb-1 pt-2">Purpose</h4>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Purpose <span class="text-red-500">*</span></label>
            <input type="text" id="editPurpose" name="purpose" required
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg"
                   oninput="smartPurpose(this)">
            <p class="text-xs text-gray-500 mt-1">Use past tense (e.g., "Attended meeting" not "Attend meeting")</p>
          </div>
        </div>
        
        <!-- Modal Footer -->
        <!-- **FIX:** Removed sticky classes, added flex-shrink-0 -->
        <div class="flex justify-end space-x-3 p-6 border-t flex-shrink-0">
          <button type="button" onclick="closeModal('editModal')" 
                  class="px-6 py-2 bg-white border border-gray-300 rounded-lg text-gray-800 font-medium hover:bg-gray-100 shadow-sm">
            Cancel
          </button>
          <button type="submit" id="editSubmitBtn"
                  class="px-6 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 shadow-sm">
            Update Request
          </button>
        </div>
      </form>
    </div>
  </div>

  
  <script>
    let currentTab = 'dashboard';
    let allOfficeOptions = []; // To store office list for the edit modal

    // Cache for data to speed up tab switching
    let dataCache = {
      pendingRequests: null,
      approvedRequests: null,
      historyRequests: null,
      lastUpdate: {
        pending: null,
        approved: null,
        history: null
      }
    };

    // Initialize on load
    window.onload = function() {
      loadDashboard();
      loadSignatory();
      loadOfficeList(); // Load offices for the edit modal
    };

    /**
     * Smart capitalize function that capitalizes each word but preserves Roman numerals
     * Example: "administrative officer ii" becomes "Administrative Officer II"
     */
    function smartCapitalize(input) {
      const cursorPos = input.selectionStart;
      const romanNumerals = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];

      let value = input.value;

      // Split into words
      let words = value.split(' ');

      // Capitalize each word
      words = words.map(word => {
        const upperWord = word.toUpperCase();

        // Check if it's a Roman numeral
        if (romanNumerals.includes(upperWord)) {
          return upperWord;
        }

        // Otherwise capitalize first letter only
        if (word.length > 0) {
          return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
        }
        return word;
      });

      input.value = words.join(' ');

      // Restore cursor position
      input.setSelectionRange(cursorPos, cursorPos);
    }

    /**
     * Smart grammar checking for Purpose field
     * - Capitalizes first letter
     * - Ensures sentence case (not all caps)
     * - Checks for past tense patterns
     */
    function smartPurpose(input) {
      const cursorPos = input.selectionStart;
      let value = input.value;

      if (value.length === 0) return;

      // Capitalize first letter only
      value = value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();

      // Common words that should stay lowercase (unless first word)
      const lowercaseWords = ['a', 'an', 'the', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'from', 'and', 'or', 'but'];

      // Split into words and apply proper case
      let words = value.split(' ');
      words = words.map((word, index) => {
        // Keep first word capitalized
        if (index === 0) {
          return word.charAt(0).toUpperCase() + word.slice(1);
        }

        // Check if word should be lowercase
        const lowerWord = word.toLowerCase();
        if (lowercaseWords.includes(lowerWord)) {
          return lowerWord;
        }

        // Keep other words as-is (already lowercased from initial transform)
        return word;
      });

      input.value = words.join(' ');

      // Restore cursor position
      input.setSelectionRange(cursorPos, cursorPos);
    }

    // **NEW:** Helper to format timestamp
    function formatRequestTimestamp(isoString) {
      if (!isoString) return 'N/A';
      try {
        const options = {
          year: 'numeric', month: 'long', day: 'numeric',
          hour: 'numeric', minute: 'numeric', hour12: true,
          timeZone: 'Asia/Manila' // Force PHT
        };
        return new Date(isoString).toLocaleString('en-US', options);
      } catch (e) {
        console.error('Error formatting timestamp:', isoString, e);
        return 'Invalid Date';
      }
    }

    // Helper function to handle all server errors
    function handleAdminError(error) {
      hideLoading();
      showErrorModal('An error occurred: ' + error.message);
      console.error('Apps Script Error:', error);
    }
    
    // --- Modal Functions ---
    function showModal(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.remove('hidden');
        setTimeout(() => modal.classList.add('show'), 10); // Start transition
      }
    }
    
    function closeModal(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.remove('show');
        setTimeout(() => modal.classList.add('hidden'), 250); // Wait for transition
      }
    }
    
    function showLoading(message = 'Loading...') {
      document.getElementById('loadingText').textContent = message;
      showModal('loadingOverlay');
    }
    
    function hideLoading() {
      closeModal('loadingOverlay');
    }
    
    function showSuccessModal(message, title = 'Success!') {
      document.getElementById('successTitle').textContent = title;
      document.getElementById('successMessage').textContent = message;
      showModal('successModal');
    }
    
    function showErrorModal(message, title = 'Error!') {
      document.getElementById('errorTitle').textContent = title;
      document.getElementById('errorMessage').textContent = message;
      showModal('errorModal');
    }
    
    /**
     * Shows a confirmation modal
     * @param {string} message - The question to ask the user.
     * @param {string} title - The title of the modal.
     * @param {string} okButtonClass - Tailwind classes for the 'OK' button (e.g., 'bg-red-600 hover:bg-red-700').
     * @param {function} onConfirm - The function to execute if the user confirms.
     */
    function showConfirmModal(message, title, okButtonClass, onConfirm) {
      document.getElementById('confirmTitle').textContent = title;
      document.getElementById('confirmMessage').textContent = message;
      
      const okBtn = document.getElementById('confirmOkBtn');
      okBtn.className = `w-full px-6 py-2 text-white rounded-lg transition ${okButtonClass}`;
      
      // Remove previous listener and add new one
      const newOkBtn = okBtn.cloneNode(true);
      okBtn.parentNode.replaceChild(newOkBtn, okBtn);
      newOkBtn.addEventListener('click', () => {
        closeModal('confirmModal');
        onConfirm(); // Execute the callback
      });
      
      showModal('confirmModal');
    }
    
    // --- Tab Switching ---
    function switchTab(tabName) {
      // Hide all content
      document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.add('hidden');
      });

      // Remove active class from all tabs
      document.querySelectorAll('[id^="tab-"]').forEach(tab => {
        tab.classList.remove('tab-active');
        tab.classList.add('text-gray-600', 'hover:bg-gray-50');
      });

      // Show selected content
      document.getElementById('content-' + tabName).classList.remove('hidden');

      // Add active class to selected tab
      const activeTab = document.getElementById('tab-' + tabName);
      activeTab.classList.add('tab-active');
      activeTab.classList.remove('text-gray-600', 'hover:bg-gray-50');

      currentTab = tabName;

      // Load data for the tab with caching
      if (tabName === 'pending') {
        loadPendingRequests(false); // false = use cache if available
      } else if (tabName === 'approved') {
        loadApprovedRequests(false);
      } else if (tabName === 'history') {
        loadHistoryRequests(false);
      }
    }
    
    // --- Data Loading Functions ---
    
    function loadDashboard() {
      showLoading('Loading dashboard...');
      google.script.run
        .withSuccessHandler(function(stats) {
          try {
            // Existing Stats
            document.getElementById('stat-pending').textContent = stats.totalPending;
            document.getElementById('stat-approved').textContent = stats.totalApproved;
            document.getElementById('stat-rejected').textContent = stats.totalRejected;
            document.getElementById('pendingCount').textContent = stats.totalPending;
            
            // **NEW** Date Stats
            document.getElementById('stat-today').textContent = stats.totalToday;
            document.getElementById('stat-month').textContent = stats.totalMonth;
            document.getElementById('stat-year').textContent = stats.totalYear;
            
            const topOfficesDiv = document.getElementById('topOffices');
            topOfficesDiv.innerHTML = '';
            
            if (!stats.topOffices || stats.topOffices.length === 0) {
              topOfficesDiv.innerHTML = '<p class="text-gray-500">No data available</p>';
            } else {
              stats.topOffices.forEach(item => {
                const div = document.createElement('div');
                div.className = 'flex items-center justify-between bg-gray-50 p-3 rounded-lg';
                div.innerHTML = `
                  <span class="text-gray-700">${item.office}</span>
                  <span class="px-3 py-1 bg-blue-100 text-blue-800 text-sm font-medium rounded-full">${item.count}</span>
                `;
                topOfficesDiv.appendChild(div);
              });
            }
          } catch (e) {
            console.error('Error rendering dashboard:', e);
            showErrorModal('A client-side error occurred while displaying dashboard: ' + e.message);
          } finally {
            hideLoading();
          }
        })
        .withFailureHandler(handleAdminError)
        .getDashboardStats();
    }
    
    function loadPendingRequests(forceReload = true) {
      // Check cache first if not forcing reload
      if (!forceReload && dataCache.pendingRequests && dataCache.lastUpdate.pending) {
        const cacheAge = Date.now() - dataCache.lastUpdate.pending;
        // Use cache if less than 30 seconds old
        if (cacheAge < 30000) {
          renderPendingRequests(dataCache.pendingRequests);
          return;
        }
      }

      showLoading('Loading pending requests...');
      google.script.run
        .withSuccessHandler(function(requests) {
          try {
            // Update cache
            dataCache.pendingRequests = requests;
            dataCache.lastUpdate.pending = Date.now();

            renderPendingRequests(requests);
          } catch (e) {
            console.error('Error rendering pending requests:', e);
            showErrorModal('A client-side error occurred while displaying requests: ' + e.message);
          } finally {
            hideLoading();
          }
        })
        .withFailureHandler(handleAdminError)
        .getPendingRequests();
    }

    function renderPendingRequests(requests) {
      console.log('Server response for getPendingRequests:', requests); // DEBUG

      const container = document.getElementById('pendingRequests');
      container.innerHTML = ''; // Clear existing

      // Clear search
      const searchInput = document.getElementById('searchInput');
      if (searchInput) searchInput.value = '';

      if (!requests || requests.length === 0) {
        container.innerHTML = '<p id="noPendingRequests" class="text-gray-500 text-center py-8">No pending requests</p>';
      } else {
        requests.forEach(req => {
          const card = createRequestCard(req, 'pending');
          container.appendChild(card);
        });
      }
    }
    
    function loadApprovedRequests(forceReload = true) {
      // Check cache first if not forcing reload
      if (!forceReload && dataCache.approvedRequests && dataCache.lastUpdate.approved) {
        const cacheAge = Date.now() - dataCache.lastUpdate.approved;
        // Use cache if less than 30 seconds old
        if (cacheAge < 30000) {
          renderApprovedRequests(dataCache.approvedRequests);
          return;
        }
      }

      showLoading('Loading approved requests...');
      google.script.run
        .withSuccessHandler(function(requests) {
          try {
            // Update cache
            dataCache.approvedRequests = requests;
            dataCache.lastUpdate.approved = Date.now();

            renderApprovedRequests(requests);
          } catch (e) {
            console.error('Error rendering approved requests:', e);
            showErrorModal('A client-side error occurred while displaying requests: ' + e.message);
          } finally {
            hideLoading();
          }
        })
        .withFailureHandler(handleAdminError)
        .getApprovedRequests();
    }

    function renderApprovedRequests(requests) {
      const container = document.getElementById('approvedRequests');
      container.innerHTML = ''; // Clear existing

      // Clear search
      const searchInput = document.getElementById('approvedSearchInput');
      if (searchInput) searchInput.value = '';

      if (!requests || requests.length === 0) {
        container.innerHTML = '<p id="noApprovedRequests" class="text-gray-500 text-center py-8">No approved requests</p>';
      } else {
        requests.forEach(req => {
          const card = createRequestCard(req, 'approved');
          container.appendChild(card);
        });
      }
    }

    function loadHistoryRequests(forceReload = true) {
      // Check cache first if not forcing reload
      if (!forceReload && dataCache.historyRequests && dataCache.lastUpdate.history) {
        const cacheAge = Date.now() - dataCache.lastUpdate.history;
        // Use cache if less than 30 seconds old
        if (cacheAge < 30000) {
          renderHistoryRequests(dataCache.historyRequests);
          return;
        }
      }

      showLoading('Loading request history...');
      google.script.run
        .withSuccessHandler(function(requests) {
          try {
            // Update cache
            dataCache.historyRequests = requests;
            dataCache.lastUpdate.history = Date.now();

            renderHistoryRequests(requests);
          } catch (e) {
            console.error('Error rendering history requests:', e);
            showErrorModal('A client-side error occurred while displaying history: ' + e.message);
          } finally {
            hideLoading();
          }
        })
        .withFailureHandler(handleAdminError)
        .getAllRequests();
    }

    function renderHistoryRequests(requests) {
      const tableBody = document.getElementById('historyTableBody');
      const noResultsDiv = document.getElementById('noHistoryRequests');
      const table = document.getElementById('historyTable');

      tableBody.innerHTML = ''; // Clear existing

      // Clear search
      const searchInput = document.getElementById('historySearchInput');
      if (searchInput) searchInput.value = '';

      if (!requests || requests.length === 0) {
        table.classList.add('hidden');
        noResultsDiv.classList.remove('hidden');
      } else {
        table.classList.remove('hidden');
        noResultsDiv.classList.add('hidden');

        requests.forEach(req => {
          const row = createHistoryRow(req);
          tableBody.appendChild(row);
        });
      }
    }

    function createHistoryRow(req) {
      const row = document.createElement('tr');
      row.className = 'border-b border-gray-200 hover:bg-gray-50 history-row';

      // Status badge
      let statusBadge = '';
      if (req.status === 'Approved') {
        statusBadge = '<span class="px-2 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full">Approved</span>';
      } else if (req.status === 'Rejected') {
        statusBadge = '<span class="px-2 py-1 bg-red-100 text-red-800 text-xs font-medium rounded-full">Rejected</span>';
      } else {
        statusBadge = '<span class="px-2 py-1 bg-yellow-100 text-yellow-800 text-xs font-medium rounded-full">Pending</span>';
      }

      row.innerHTML = `
        <td class="px-4 py-3 text-sm text-gray-900 font-medium">${req.registrationNo}</td>
        <td class="px-4 py-3 text-sm text-gray-900">${req.displayName}</td>
        <td class="px-4 py-3 text-sm text-gray-600">${req.position}</td>
        <td class="px-4 py-3 text-sm text-gray-600">${req.office}</td>
        <td class="px-4 py-3 text-sm text-gray-600">${req.inclusiveDates}</td>
        <td class="px-4 py-3 text-sm">${statusBadge}</td>
        <td class="px-4 py-3 text-sm text-gray-600">${formatRequestTimestamp(req.timestamp)}</td>
        <td class="px-4 py-3 text-sm text-gray-600">${req.approvedBy || 'N/A'}</td>
      `;

      return row;
    }
    
    // --- Card Creation ---
    
    function createRequestCard(req, type) {
      const card = document.createElement('div');
      // Added request-card class for search and improved styling
      card.className = 'bg-white border border-gray-200 rounded-lg p-4 shadow-sm request-card';
      
      let buttons = '';
      let timestampInfo = ''; // **NEW**

      if (type === 'pending') {
        // Store request data on the edit button for easy access
        const reqData = encodeURIComponent(JSON.stringify(req));
        
        buttons = `
          <button onclick="approveRequest(${req.rowNumber}, '${req.registrationNo}')"
                  class="flex items-center justify-center w-full px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition shadow-sm mb-2">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>
            Approve
          </button>
          <button onclick="openEditModal(this.dataset.req)" data-req="${reqData}"
                  class="flex items-center justify-center w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition shadow-sm mb-2">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path></svg>
            Edit
          </button>
          <button onclick="rejectRequest(${req.rowNumber})"
                  class="flex items-center justify-center w-full px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition shadow-sm">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
            Reject
          </button>
        `;
        // **NEW:** Add timestamp info only for pending cards
        // **FIX:** Added italic and text-green-600
        timestampInfo = `<p class="text-sm italic text-green-600"><strong>Date Requested:</strong> ${formatRequestTimestamp(req.timestamp)}</p>`;
      
      } else { // Approved
        buttons = `
          <button onclick="generateCertificate('${req.registrationNo}')"
                  class="flex items-center justify-center w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition shadow-sm mb-2">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>
            Generate
          </button>
        `;
        if (req.pdfUrl) {
          buttons += `
            <a href="${req.pdfUrl}" target="_blank"
               class="flex items-center justify-center w-full text-center px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition shadow-sm inline-block">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg>
              View PDF
            </a>
          `;
        }
      }
      
      card.innerHTML = `
        <div class="flex flex-col md:flex-row justify-between items-start">
          <div class="flex-1 mb-4 md:mb-0 md:mr-4">
            <div class="flex items-center mb-2">
              <!-- **FIX:** Added text-blue-700 and font-bold -->
              <span class="font-bold text-blue-700 text-lg">${req.displayName}</span>
              <span class="ml-3 px-3 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded-full">${req.registrationNo}</span>
            </div>
            <p class="text-gray-600 text-sm"><strong>Position:</strong> ${req.position}</p>
            <p class="text-gray-600 text-sm"><strong>Office:</strong> ${req.office}</p>
            <p class="text-gray-600 text-sm"><strong>Dates:</strong> ${req.inclusiveDates}</p>
            <p class="text-gray-600 text-sm"><strong>Purpose:</strong> ${req.purpose}</p>
            ${timestampInfo} <!-- **NEW** -->
          </div>
          <div class="w-full md:w-auto md:ml-4 flex-shrink-0">
            ${buttons}
          </div>
        </div>
      `;
      
      return card;
    }
    
    // --- Request Actions (Approve, Reject, Generate) ---
    
    function approveRequest(rowNumber, regNo) {
      showConfirmModal(
        `Are you sure you want to approve request ${regNo}?`,
        'Confirm Approval',
        'bg-green-600 hover:bg-green-700',
        () => {
          showLoading('Approving request...');
          google.script.run
            .withSuccessHandler(function(response) {
              hideLoading();
              if (response.success) {
                // Clear cache to force reload
                dataCache.pendingRequests = null;
                dataCache.approvedRequests = null;
                dataCache.historyRequests = null;

                showSuccessModal(response.message);
                loadDashboard();
                loadPendingRequests(true);
              } else {
                showErrorModal(response.message);
              }
            })
            .withFailureHandler(handleAdminError)
            .approveRequest(rowNumber, regNo);
        }
      );
    }
    
    function rejectRequest(rowNumber) {
      showConfirmModal(
        'Are you sure you want to reject this request?',
        'Confirm Rejection',
        'bg-red-600 hover:bg-red-700',
        () => {
          showLoading('Rejecting request...');
          google.script.run
            .withSuccessHandler(function(response) {
              hideLoading();
              if (response.success) {
                // Clear cache to force reload
                dataCache.pendingRequests = null;
                dataCache.historyRequests = null;

                showSuccessModal(response.message);
                loadDashboard();
                loadPendingRequests(true);
              } else {
                showErrorModal(response.message);
              }
            })
            .withFailureHandler(handleAdminError)
            .rejectRequest(rowNumber);
        }
      );
    }
    
    function generateCertificate(regNo) {
      showLoading('Generating certificate...');
      google.script.run
        .withSuccessHandler(function(response) {
          hideLoading();
          if (response.success) {
            // Clear cache to force reload
            dataCache.approvedRequests = null;

            // Open PDF in new tab for preview (don't show success modal yet)
            if (response.pdfUrl) {
              window.open(response.pdfUrl, '_blank');
              showSuccessModal('Certificate generated successfully! The PDF has been opened in a new tab.');
            } else {
              showSuccessModal(response.message);
            }
            loadApprovedRequests(true);
          } else {
            showErrorModal(response.message);
          }
        })
        .withFailureHandler(handleAdminError)
        .generateCertificate(regNo);
    }
    
    // --- Edit Request Functions ---
    
    function loadOfficeList() {
      // Load and store office list for edit modal
      google.script.run
        .withSuccessHandler(function(offices) {
          allOfficeOptions = offices; // Store them
          const select = document.getElementById('editOffice');
          select.innerHTML = '<option value="">-- Select Office --</option>'; // Clear
          
          offices.forEach(office => {
            const option = document.createElement('option');
            option.value = office;
            option.textContent = office;
            select.appendChild(option);
          });
          
          const otherOption = document.createElement('option');
          otherOption.value = 'Other';
          otherOption.textContent = 'Other (Specify)';
          select.appendChild(otherOption);
        })
        .withFailureHandler(handleAdminError)
        .getOffices();
    }
    
    function openEditModal(reqData) {
      const req = JSON.parse(decodeURIComponent(reqData));
      
      // Populate form
      document.getElementById('editRowNumber').value = req.rowNumber;
      document.getElementById('editTimestamp').value = req.timestamp; 
      document.getElementById('editRequestDate').value = formatRequestTimestamp(req.timestamp); // **NEW**
      document.getElementById('editLastName').value = req.lastName;
      document.getElementById('editFirstName').value = req.firstName;
      document.getElementById('editMiddleInitial').value = req.middleInitial;
      document.getElementById('editSuffix').value = req.suffix;
      document.getElementById('editPosition').value = req.position;
      document.getElementById('editPurpose').value = req.purpose;
      document.getElementById('editStartDate').value = req.startDate;
      document.getElementById('editEndDate').value = req.endDate;
      
      // **NEW:** Set max date based on timestamp
      try {
        const requestDate = new Date(req.timestamp);
        const maxDate = requestDate.toISOString().split('T')[0];
        document.getElementById('editStartDate').setAttribute('max', maxDate);
        document.getElementById('editEndDate').setAttribute('max', maxDate);
      } catch (e) {
        console.error('Invalid timestamp for setting max date:', req.timestamp, e);
        // Don't set max date if timestamp is invalid
      }

      // Handle office dropdown
      const officeSelect = document.getElementById('editOffice');
      const customOfficeContainer = document.getElementById('editCustomOfficeContainer');
      const customOfficeInput = document.getElementById('editCustomOffice');
      
      if (allOfficeOptions.includes(req.office)) {
        officeSelect.value = req.office;
        customOfficeContainer.classList.add('hidden');
        customOfficeInput.value = '';
        customOfficeInput.required = false;
      } else {
        // It's a custom office
        officeSelect.value = 'Other';
        customOfficeContainer.classList.remove('hidden');
        customOfficeInput.value = req.office;
        customOfficeInput.required = true;
      }
      
      // Clear old date errors
      document.getElementById('editDateError').classList.add('hidden');
      
      showModal('editModal');
    }
    
    function handleEditOfficeChange() {
      const office = document.getElementById('editOffice').value;
      const customOfficeContainer = document.getElementById('editCustomOfficeContainer');
      const customOffice = document.getElementById('editCustomOffice');
      
      if (office === 'Other') {
        customOfficeContainer.classList.remove('hidden');
        customOffice.required = true;
      } else {
        customOfficeContainer.classList.add('hidden');
        customOffice.required = false;
        customOffice.value = '';
      }
    }
    
    function validateEditDates() {
      const startDate = document.getElementById('editStartDate').value;
      const endDate = document.getElementById('editEndDate').value;
      const dateError = document.getElementById('editDateError');
      const submitBtn = document.getElementById('editSubmitBtn');
      
      // **NEW:** Get max date from timestamp
      const requestDate = new Date(document.getElementById('editTimestamp').value);
      
      let errorMsg = '';
      
      if (startDate && endDate && new Date(endDate) < new Date(startDate)) {
        errorMsg = 'End date cannot be earlier than start date.';
      } else if (new Date(endDate) > requestDate) {
        // **NEW:** Check against request date
         errorMsg = 'End date cannot be later than the request date.';
      } else if (new Date(startDate) > requestDate) {
         // **NEW:** Check start date too
         errorMsg = 'Start date cannot be later than the request date.';
      }
      
      if (errorMsg) {
        dateError.textContent = errorMsg;
        dateError.classList.remove('hidden');
        submitBtn.disabled = true;
        return false;
      }
      
      dateError.classList.add('hidden');
      submitBtn.disabled = false;
      return true;
    }
    
    function handleUpdateRequest(event) {
      event.preventDefault();

      // Final validation check
      if (!validateEditDates()) return;

      const form = event.target;
      const officeValue = form.office.value === 'Other'
        ? form.customOffice.value.trim().toUpperCase()
        : form.office.value;

      const updateData = {
        rowNumber: form.rowNumber.value,
        lastName: form.lastName.value.trim().toUpperCase(),
        firstName: form.firstName.value.trim().toUpperCase(),
        middleInitial: form.middleInitial.value.trim().toUpperCase(),
        suffix: form.suffix.value.trim().toUpperCase(),
        position: form.position.value.trim(), // Keep as-is, already smart capitalized
        office: officeValue,
        startDate: form.startDate.value,
        endDate: form.endDate.value,
        purpose: form.purpose.value.trim() // Don't force uppercase
      };

      showLoading('Updating request...');
      closeModal('editModal');

      google.script.run
        .withSuccessHandler(function(response) {
          hideLoading();
          if (response.success) {
            // Clear cache to force reload
            dataCache.pendingRequests = null;
            dataCache.historyRequests = null;

            showSuccessModal(response.message);
            loadPendingRequests(true); // Refresh the list
          } else {
            showErrorModal(response.message);
          }
        })
        .withFailureHandler(handleAdminError)
        .updatePendingRequest(updateData);
    }

    // --- Settings Functions ---
    
    function loadSignatory() {
      google.script.run
        .withSuccessHandler(function(signatory) {
          document.getElementById('signatoryName').value = signatory.name;
          document.getElementById('signatoryPosition').value = signatory.position;
        })
        .withFailureHandler(handleAdminError)
        .getSignatory();
    }
    
    function handleSignatoryUpdate(event) {
      event.preventDefault();
      
      const name = document.getElementById('signatoryName').value;
      const position = document.getElementById('signatoryPosition').value;
      
      showLoading('Updating signatory...');
      google.script.run
        .withSuccessHandler(function(response) {
          hideLoading();
          const messageDiv = document.getElementById('settingsMessage');
          messageDiv.className = response.success 
            ? 'p-3 bg-green-100 text-green-700 rounded' 
            : 'p-3 bg-red-100 text-red-700 rounded';
          messageDiv.textContent = response.message;
          messageDiv.classList.remove('hidden');
          
          setTimeout(() => {
            messageDiv.classList.add('hidden');
          }, 3000);
        })
        .withFailureHandler(handleAdminError)
        .updateSignatory(name, position);
    }
    
    // --- Search Filter Functions ---
    
    function filterPendingRequests() {
      const searchTerm = document.getElementById('searchInput').value.toUpperCase();
      const requestsContainer = document.getElementById('pendingRequests');
      const cards = requestsContainer.querySelectorAll('.request-card');
      let foundRequest = false;

      cards.forEach(card => {
        const cardText = card.textContent || card.innerText;
        if (cardText.toUpperCase().indexOf(searchTerm) > -1) {
          card.style.display = '';
          foundRequest = true;
        } else {
          card.style.display = 'none';
        }
      });
      
      // Handle 'no results' message
      let noResultsMsg = requestsContainer.querySelector('#noSearchResults');
      if (noResultsMsg) {
        noResultsMsg.remove();
      }
      
      const noPendingMsg = requestsContainer.querySelector('#noPendingRequests');

      if (!foundRequest && cards.length > 0) {
        noResultsMsg = document.createElement('p');
        noResultsMsg.id = 'noSearchResults';
        noResultsMsg.className = 'text-gray-500 text-center py-8';
        noResultsMsg.textContent = 'No requests found matching your search.';
        requestsContainer.appendChild(noResultsMsg);
        if(noPendingMsg) noPendingMsg.style.display = 'none'; // Hide original 'no pending'
      } else if (noPendingMsg) {
         noPendingMsg.style.display = (cards.length === 0) ? 'block' : 'none';
      }
    }
    
    function filterApprovedRequests() {
      const searchTerm = document.getElementById('approvedSearchInput').value.toUpperCase();
      const requestsContainer = document.getElementById('approvedRequests');
      const cards = requestsContainer.querySelectorAll('.request-card');
      let foundRequest = false;

      cards.forEach(card => {
        const cardText = card.textContent || card.innerText;
        if (cardText.toUpperCase().indexOf(searchTerm) > -1) {
          card.style.display = '';
          foundRequest = true;
        } else {
          card.style.display = 'none';
        }
      });

      // Handle 'no results' message
      let noResultsMsg = requestsContainer.querySelector('#noApprovedSearchResults');
      if (noResultsMsg) {
        noResultsMsg.remove();
      }

      const noApprovedMsg = requestsContainer.querySelector('#noApprovedRequests');

      if (!foundRequest && cards.length > 0) {
        noResultsMsg = document.createElement('p');
        noResultsMsg.id = 'noApprovedSearchResults';
        noResultsMsg.className = 'text-gray-500 text-center py-8';
        noResultsMsg.textContent = 'No approved requests found matching your search.';
        requestsContainer.appendChild(noResultsMsg);
        if(noApprovedMsg) noApprovedMsg.style.display = 'none'; // Hide original 'no approved'
      } else if (noApprovedMsg) {
         noApprovedMsg.style.display = (cards.length === 0) ? 'block' : 'none';
      }
    }

    function filterHistoryRequests() {
      const searchTerm = document.getElementById('historySearchInput').value.toUpperCase();
      const tableBody = document.getElementById('historyTableBody');
      const rows = tableBody.querySelectorAll('.history-row');
      let foundRequest = false;

      rows.forEach(row => {
        const rowText = row.textContent || row.innerText;
        if (rowText.toUpperCase().indexOf(searchTerm) > -1) {
          row.style.display = '';
          foundRequest = true;
        } else {
          row.style.display = 'none';
        }
      });

      // Show/hide table and no results message
      const table = document.getElementById('historyTable');
      const noResultsDiv = document.getElementById('noHistoryRequests');

      if (!foundRequest && rows.length > 0) {
        table.classList.add('hidden');
        noResultsDiv.classList.remove('hidden');
        noResultsDiv.textContent = 'No requests found matching your search.';
      } else if (rows.length === 0) {
        table.classList.add('hidden');
        noResultsDiv.classList.remove('hidden');
        noResultsDiv.textContent = 'No requests found';
      } else {
        table.classList.remove('hidden');
        noResultsDiv.classList.add('hidden');
      }
    }

  </script>
</body>
</html>

