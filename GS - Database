/**
 * RMS CA DATABASE - Code.gs
 * This is the private admin-only spreadsheet that serves as the central database.
 * It contains all backend logic for admin operations and the public Web App.
 *
 * --- V2 UPDATE ---
 * - Strengthened PDF sharing logic in `generateCertificate` to fix "Unable to open file" error.
 * - Added `Utilities.sleep()` to allow file processing before setting permissions.
 * - Changed PDF URL format to a more direct link (`/uc?export=view`).
 * - Added `fixAllPDFSharing()` menu item to repair existing broken links.
 * - Enabled Drive API (Advanced Drive Service) is now required for this script to run correctly.
 * -----------------
 */

// Configuration
const GOOGLE_DOC_TEMPLATE_ID = '1Ibxh8clLTd-9h-h0PkGRYjSw0Q_klxCuw8PXVpYM-NE';
const DRIVE_FOLDER_ID = '12FhqSr_I5C0i0hylaD2CD2l-PySppSkg';

/**
 * Creates custom menu when spreadsheet opens
 */
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('üõ°Ô∏è RMS Admin')
    .addItem('Admin Panel', 'showAdminPanel')
    .addSeparator()
    .addItem('Get Web App URL', 'showWebAppUrl')
    .addSeparator()
    .addItem('üîß Fix PDF Sharing (All)', 'fixAllPDFSharing') // <-- NEW: Added fix-it menu
    .addToUi();
}

/**
 * Shows the admin panel modal
 */
function showAdminPanel() {
  const html = HtmlService.createHtmlOutputFromFile('AdminPanel')
    .setWidth(1100) // Changed from 900 to 1100
    .setHeight(700);
  SpreadsheetApp.getUi().showModalDialog(html, 'RMS Admin Panel');
}

/**
 * Shows the Web App URL for verification
 */
function showWebAppUrl() {
  const url = ScriptApp.getService().getUrl();
  const ui = SpreadsheetApp.getUi();
  ui.alert('Web App URL',
           'Your verification URL:\n\n' + url + '\n\n' +
           'Make sure the Web App is deployed as "Execute as: Me" and "Who has access: Anyone"',
           ui.ButtonSet.OK);
}

/**
 * Web App - Handles verification page requests
 */
function doGet(e) {
  const regNo = e.parameter.id;

  if (!regNo) {
    return HtmlService.createHtmlOutput('<h1>Invalid Request</h1><p>No registration number provided.</p>');
  }

  // Get the request data
  const requestData = getRequestByRegNo(regNo);

  // Create and return the verification page
  const template = HtmlService.createTemplateFromFile('VerificationPage');
  template.requestData = requestData;
  template.regNo = regNo;

  return template.evaluate()
    .setTitle('Certificate Verification')
    .addMetaTag('viewport', 'width=device-width, initial-scale=1');
}

/**
 * Helper function to format date inputs (YYYY-MM-DD)
 * Handles invalid or empty dates gracefully.
 */
function formatDateForInput(date) {
  if (!date || !(date instanceof Date) || isNaN(date.getTime())) {
    return ''; // Return empty string for invalid dates
  }

  // Adjust for timezone issues by getting parts individually
  const year = date.getFullYear();
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const day = date.getDate().toString().padStart(2, '0');

  return `${year}-${month}-${day}`;
}

/**
 * Helper function to get ordinal suffix for day (1st, 2nd, 3rd, etc.)
 */
function getOrdinalSuffix(day) {
  if (day > 3 && day < 21) return 'th';
  switch (day % 10) {
    case 1: return 'st';
    case 2: return 'nd';
    case 3: return 'rd';
    default: return 'th';
  }
}

/**
 * Formats date in ordinal format: "23rd day of October 2025"
 */
function formatDateOrdinal(date, timezone) {
  const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
                      'July', 'August', 'September', 'October', 'November', 'December'];

  const dateObj = new Date(date);
  const day = dateObj.getDate();
  const month = monthNames[dateObj.getMonth()];
  const year = dateObj.getFullYear();

  return `${day}${getOrdinalSuffix(day)} day of ${month} ${year}`;
}

/**
 * Gets request data by registration number
 */
function getRequestByRegNo(regNo) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Requests');
  const data = sheet.getDataRange().getValues();

  for (let i = 1; i < data.length; i++) {
    if (data[i][1] === regNo) { // Column B: RegistrationNo
      return {
        found: true,
        registrationNo: data[i][1],
        displayName: data[i][2],
        position: data[i][7],
        office: data[i][8],
        inclusiveDates: data[i][11] ? formatInclusiveDates(formatDateForInput(new Date(data[i][9])), formatDateForInput(new Date(data[i][10]))) : 'N/A',
        purpose: data[i][12],
        status: data[i][13],
        issueDate: data[i][16] ? new Date(data[i][16]).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' }) : 'N/A',
        approvedBy: data[i][15] || 'N/A',
        pdfUrl: data[i][18] || null // Column S: GeneratedPDF_URL
      };
    }
  }

  return { found: false };
}

/**
 * Gets dashboard statistics
 */
function getDashboardStats() {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Requests');

    if (!sheet) {
      console.error('Requests sheet not found');
      return { totalPending: 0, totalApproved: 0, totalRejected: 0, topOffices: [], totalToday: 0, totalMonth: 0, totalYear: 0 };
    }

    const data = sheet.getDataRange().getValues();

    if (!data || data.length <= 1) {
      console.log('No data in Requests sheet');
      return { totalPending: 0, totalApproved: 0, totalRejected: 0, topOffices: [], totalToday: 0, totalMonth: 0, totalYear: 0 };
    }

    let totalPending = 0;
    let totalApproved = 0;
    let totalRejected = 0;
    const officeCounts = {};

    // **NEW:** Date stats
    let totalToday = 0;
    let totalMonth = 0;
    let totalYear = 0;

    // Get current date parts in script's timezone
    const now = new Date();
    const nowDay = now.getDate();
    const nowMonth = now.getMonth();
    const nowYear = now.getFullYear();

    for (let i = 1; i < data.length; i++) {
      const status = data[i][13]; // Column N: Status
      const office = data[i][8];  // Column I: Office
      const timestampRaw = data[i][0]; // Column A: Timestamp

      if (status === 'Pending') totalPending++;
      if (status === 'Approved') totalApproved++;
      if (status === 'Rejected') totalRejected++;

      if (office) {
        officeCounts[office] = (officeCounts[office] || 0) + 1;
      }

      // **NEW:** Calculate date stats
      if (timestampRaw && !isNaN(new Date(timestampRaw).getTime())) {
        const timestamp = new Date(timestampRaw);

        if (timestamp.getFullYear() === nowYear) {
          totalYear++;
          if (timestamp.getMonth() === nowMonth) {
            totalMonth++;
            if (timestamp.getDate() === nowDay) {
              totalToday++;
            }
          }
        }
      }
    }

    // Get top 5 offices
    const topOffices = Object.entries(officeCounts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .map(([office, count]) => ({ office, count }));

    return {
      totalPending,
      totalApproved,
      totalRejected,
      topOffices,
      totalToday,
      totalMonth,
      totalYear
    };
  } catch (error) {
    console.error('Error fetching dashboard stats:', error);
    return { totalPending: 0, totalApproved: 0, totalRejected: 0, topOffices: [], totalToday: 0, totalMonth: 0, totalYear: 0 };
  }
}

/**
 * Gets all pending requests
 */
function getPendingRequests() {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Requests');

    if (!sheet) {
      console.error('Requests sheet not found');
      return [];
    }

    const data = sheet.getDataRange().getValues();

    if (!data || data.length <= 1) {
      console.log('No data in Requests sheet');
      return [];
    }

    const requests = [];

    for (let i = 1; i < data.length; i++) {
      if (data[i][13] === 'Pending') { // Column N: Status

        let timestampStr = '';
        try {
          const ts = new Date(data[i][0]);
          if (isNaN(ts.getTime())) {
            throw new Error('Invalid timestamp');
          }
          timestampStr = ts.toISOString();
        } catch (e) {
          console.warn(`Invalid timestamp for row ${i+1}: ${data[i][0]}`);
          timestampStr = new Date().toISOString(); // Fallback to now
        }

        requests.push({
          rowNumber: i + 1,
          registrationNo: data[i][1],
          displayName: data[i][2],
          lastName: data[i][3],
          firstName: data[i][4],
          middleInitial: data[i][5],
          suffix: data[i][6],
          position: data[i][7],
          office: data[i][8],
          startDate: formatDateForInput(new Date(data[i][9])),
          endDate: formatDateForInput(new Date(data[i][10])),
          inclusiveDates: formatInclusiveDates(formatDateForInput(new Date(data[i][9])), formatDateForInput(new Date(data[i][10]))),
          purpose: data[i][12],
          submittedBy: data[i][14],
          timestamp: timestampStr
        });
      }
    }

    return requests.reverse(); // Show newest first
  } catch (error) {
    console.error('Error fetching pending requests:', error);
    return [];
  }
}

/**
 * Gets approved requests (most recent 20)
 */
function getApprovedRequests() {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Requests');

    if (!sheet) {
      console.error('Requests sheet not found');
      return [];
    }

    const data = sheet.getDataRange().getValues();

    if (!data || data.length <= 1) {
      console.log('No data in Requests sheet');
      return [];
    }

    const requests = [];

    for (let i = 1; i < data.length; i++) {
      if (data[i][13] === 'Approved') { // Column N: Status
        requests.push({
          rowNumber: i + 1,
          registrationNo: data[i][1],
          displayName: data[i][2],
          position: data[i][7],
          office: data[i][8],
          inclusiveDates: formatInclusiveDates(formatDateForInput(new Date(data[i][9])), formatDateForInput(new Date(data[i][10]))),
          purpose: data[i][12],
          approvedBy: data[i][15],
          issueDate: data[i][16] ? new Date(data[i][16]).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' }) : 'N/A',
          pdfUrl: data[i][18]
        });
      }
    }

    return requests.reverse().slice(0, 20); // Show 20 most recent
  } catch (error) {
    console.error('Error fetching approved requests:', error);
    return [];
  }
}

/**
 * Gets all requests (for history tab)
 */
function getAllRequests() {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Requests');

    if (!sheet) {
      console.error('Requests sheet not found');
      return [];
    }

    const data = sheet.getDataRange().getValues();

    if (!data || data.length <= 1) {
      console.log('No data in Requests sheet');
      return [];
    }

    const requests = [];

    for (let i = 1; i < data.length; i++) {
      let timestampStr = '';
      try {
        const ts = new Date(data[i][0]);
        if (isNaN(ts.getTime())) {
          throw new Error('Invalid timestamp');
        }
        timestampStr = ts.toISOString();
      } catch (e) {
        console.warn(`Invalid timestamp for row ${i+1}: ${data[i][0]}`);
        timestampStr = new Date().toISOString(); // Fallback to now
      }

      requests.push({
        rowNumber: i + 1,
        registrationNo: data[i][1],
        displayName: data[i][2],
        position: data[i][7],
        office: data[i][8],
        inclusiveDates: formatInclusiveDates(formatDateForInput(new Date(data[i][9])), formatDateForInput(new Date(data[i][10]))),
        purpose: data[i][12],
        status: data[i][13],
        approvedBy: data[i][15] || 'N/A',
        issueDate: data[i][16] ? new Date(data[i][16]).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' }) : 'N/A',
        timestamp: timestampStr
      });
    }

    return requests.reverse(); // Show newest first
  } catch (error) {
    console.error('Error fetching all requests:', error);
    return [];
  }
}

/**
 * Approves a request
 */
function approveRequest(rowNumber, regNo) {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Requests');
    const approvedBy = Session.getActiveUser().getEmail();
    const issueDate = new Date();

    // Get the Web App URL
    const webAppUrl = ScriptApp.getService().getUrl();
    const verificationUrl = webAppUrl + '?id=' + regNo;

    // Update the row
    sheet.getRange(rowNumber, 14).setValue('Approved'); // Column N: Status
    sheet.getRange(rowNumber, 16).setValue(approvedBy);  // Column P: ApprovedBy
    sheet.getRange(rowNumber, 17).setValue(issueDate);   // Column Q: IssueDate
    sheet.getRange(rowNumber, 18).setValue(verificationUrl); // Column R: VerificationURL

    return {
      success: true,
      message: 'Request approved successfully!'
    };
  } catch (error) {
    console.error('Error approving request:', error);
    return {
      success: false,
      message: 'Error: ' + error.toString()
    };
  }
}

/**
 * Rejects a request
 */
function rejectRequest(rowNumber) {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Requests');
    const rejectedBy = Session.getActiveUser().getEmail();

    sheet.getRange(rowNumber, 14).setValue('Rejected'); // Column N: Status
    sheet.getRange(rowNumber, 16).setValue(rejectedBy);  // Column P: ApprovedBy (storing who rejected)

    return {
      success: true,
      message: 'Request rejected.'
    };
  } catch (error) {
    console.error('Error rejecting request:', error);
    return {
      success: false,
      message: 'Error: ' + error.toString()
    };
  }
}

/**
 * Generates a PDF certificate
 * This is the most critical function
 */
function generateCertificate(regNo) {
  try {
    // Get the request data
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Requests');
    const data = sheet.getDataRange().getValues();
    let requestData = null;
    let rowNumber = null;

    for (let i = 1; i < data.length; i++) {
      if (data[i][1] === regNo && data[i][13] === 'Approved') {
        requestData = {
          displayName: data[i][2],
          position: data[i][7],
          office: data[i][8],
          inclusiveDates: data[i][11], // Use pre-formatted
          purpose: data[i][12],
          regNo: data[i][1],
          issueDate: data[i][16]
        };
        rowNumber = i + 1;
        break;
      }
    }

    if (!requestData) {
      throw new Error('Request not found or not approved');
    }

    // Get signatory data
    const signatorySheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Signatories');
    const signatoryData = signatorySheet.getRange(2, 1, 1, 2).getValues()[0];
    const signatoryName = signatoryData[0] || 'N/A';
    const signatoryPosition = signatoryData[1] || 'N/A';

    // Format issue date in ordinal format: "23rd day of October 2025"
    const issueDate = formatDateOrdinal(requestData.issueDate, Session.getScriptTimeZone());

    // Make a copy of the template
    const template = DriveApp.getFileById(GOOGLE_DOC_TEMPLATE_ID);
    const folder = DriveApp.getFolderById(DRIVE_FOLDER_ID);
    const docCopy = template.makeCopy('CA_' + regNo + '_temp', folder);
    const doc = DocumentApp.openById(docCopy.getId());
    const body = doc.getBody();

    // Clear out old/wrong date placeholders, just in case.
    body.replaceText('{{StartDate}}', '');
    body.replaceText('{{EndDate}}', '');

    // Replace text placeholders
    body.replaceText('{{DisplayName}}', requestData.displayName);
    body.replaceText('{{Position}}', requestData.position);
    body.replaceText('{{Office}}', requestData.office);
    body.replaceText('{{Purpose}}', requestData.purpose);
    body.replaceText('{{InclusiveDates}}', requestData.inclusiveDates);
    body.replaceText('{{RegNo}}', requestData.regNo);
    body.replaceText('{{SignatoryName}}', signatoryName);
    body.replaceText('{{SignatoryPosition}}', signatoryPosition);
    body.replaceText('{{IssueDate}}', issueDate);

    // Remove QR code placeholder if it exists
    body.replaceText('{{QRCode}}', '');

    // Save and close the document
    doc.saveAndClose();

    // Convert to PDF
    const pdfBlob = docCopy.getAs('application/pdf');
    pdfBlob.setName('CA_' + regNo + '.pdf');

    const pdfFile = folder.createFile(pdfBlob);
    const fileId = pdfFile.getId();

    // **FIX:** Wait a moment for file to be fully created and processed by Drive
    Utilities.sleep(2000); // 2-second pause

    // **FIX:** Set sharing permissions - Use Drive API first (more reliable)
    let sharingSuccess = false;

    try {
      // Method 1: Drive API (Advanced Service)
      // This is the most reliable method and requires the Drive API to be enabled.
      Drive.Permissions.insert(
        {
          'type': 'anyone',
          'role': 'reader',
          'withLink': true // This is deprecated but still works; 'allowFileDiscovery: false' is newer
        },
        fileId,
        {
          'supportsAllDrives': true // Add this if using Shared Drives
        }
      );
      console.log('Drive API sharing successful for file: ' + fileId);
      sharingSuccess = true;
    } catch (e) {
      console.error('Drive API permission failed (is it enabled?):', e);

      // Fallback: Try DriveApp.setSharing
      try {
        pdfFile.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
        console.log('Fallback setSharing successful for file: ' + fileId);
        sharingSuccess = true;
      } catch (e2) {
        console.error('Fallback setSharing also failed:', e2);
      }
    }

    // Verify sharing worked
    if (!sharingSuccess) {
      console.error('CRITICAL WARNING: File sharing failed for: ' + fileId + '. The link will not work.');
      // Even if sharing fails, we proceed but the link will be broken.
      // The `fixAllPDFSharing` function can be used to repair this later.
    }

    // **FIX:** Use a more reliable direct-download-friendly URL
    // const pdfUrl = 'https://drive.google.com/file/d/' + fileId + '/view'; // Old URL
    const pdfUrl = 'https://drive.google.com/uc?export=view&id=' + fileId; // New, more direct URL

    // Save PDF URL to sheet
    sheet.getRange(rowNumber, 19).setValue(pdfUrl); // Column S: GeneratedPDF_URL

    // Delete the temporary doc
    docCopy.setTrashed(true);

    return {
      success: true,
      message: 'Certificate generated successfully!',
      pdfUrl: pdfUrl
    };

  } catch (error) {
    console.error('Error generating certificate:', error, error.stack);
    return {
      success: false,
      message: 'Error generating certificate: ' + error.toString()
    };
  }
}

/**
 * Gets current signatory
 */
function getSignatory() {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Signatories');
    const data = sheet.getRange(2, 1, 1, 2).getValues()[0];

    return {
      name: data[0] || '',
      position: data[1] || ''
    };
  } catch (error) {
    console.error('Error getting signatory:', error);
    return { name: '', position: '' };
  }
}

/**
 * Updates signatory information
 */
function updateSignatory(name, position) {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Signatories');
    sheet.getRange(2, 1).setValue(name);
    sheet.getRange(2, 2).setValue(position);

    return {
      success: true,
      message: 'Signatory updated successfully!'
    };
  } catch (error) {
    console.error('Error updating signatory:', error);
    return {
      success: false,
      message: 'Error: ' + error.toString()
    };
  }
}

// --- NEW FUNCTIONS FOR ADMIN PANEL ---

/**
 * Gets list of offices from this Database
 * (Called by AdminPanel)
 */
function getOffices() {
  try {
    const officesSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Offices');

    if (!officesSheet) {
      throw new Error('Offices sheet not found in RMS Database');
    }

    const data = officesSheet.getRange(2, 1, officesSheet.getLastRow() - 1, 1).getValues();
    const offices = data.map(row => row[0]).filter(office => office !== '');

    return offices;
  } catch (error) {
    console.error('Error fetching offices:', error);
    throw new Error('Unable to fetch offices. Please contact the administrator.');
  }
}

/**
 * Updates a pending request from the Admin Panel
 * @param {Object} updateData - The form data from the edit modal
 * @returns {Object} Success or error response
 */
function updatePendingRequest(updateData) {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Requests');
    const rowNumber = parseInt(updateData.rowNumber, 10);

    if (isNaN(rowNumber) || rowNumber < 2) {
      throw new Error('Invalid row number.');
    }

    // Recalculate DisplayName and InclusiveDates
    const displayName = formatDisplayName(updateData);
    const inclusiveDates = formatInclusiveDates(updateData.startDate, updateData.endDate);

    // Update the row
    // C: DisplayName, D: LastName, E: FirstName, F: MiddleInitial, G: Suffix
    sheet.getRange(rowNumber, 3, 1, 5).setValues([[
      displayName,
      updateData.lastName,
      updateData.firstName,
      updateData.middleInitial || '',
      updateData.suffix || ''
    ]]);

    // H: Position, I: Office
    sheet.getRange(rowNumber, 8, 1, 2).setValues([[
      updateData.position,
      updateData.office
    ]]);

    // J: StartDate, K: EndDate, L: InclusiveDates, M: Purpose
    sheet.getRange(rowNumber, 10, 1, 4).setValues([[
      new Date(updateData.startDate),
      new Date(updateData.endDate),
      inclusiveDates,
      updateData.purpose
    ]]);

    return {
      success: true,
      message: 'Request updated successfully!'
    };

  } catch (error) {
    console.error('Error updating request:', error);
    return {
      success: false,
      message: 'Error: ' + error.toString()
    };
  }
}

/**
 * Formats the name into DisplayName format (Helper)
 * Example: "JUAN A. DELA CRUZ, JR."
 */
function formatDisplayName(formData) {
  let displayName = formData.lastName;

  if (formData.firstName) {
    displayName = formData.firstName + ' ';
    if (formData.middleInitial) {
      displayName += formData.middleInitial + '. ';
    }
    displayName += formData.lastName;
  }

  if (formData.suffix) {
    displayName += ', ' + formData.suffix;
  }

  return displayName.toUpperCase(); // Ensure uppercase
}

/**
 * Formats dates into InclusiveDates string (Helper)
 * Examples: "October 29, 2025" or "October 29-31, 2025"
 * **FIX:** This function now handles timezone offsets
 */
function formatInclusiveDates(startDateStr, endDateStr) {
  try {
    // Create dates as UTC to avoid timezone shifts from YYYY-MM-DD strings
    const start = new Date(startDateStr + 'T00:00:00Z');
    const end = new Date(endDateStr + 'T00:00:00Z');

    const options = { year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC' };

    const startMonth = start.toLocaleDateString('en-US', { month: 'long', timeZone: 'UTC' });
    const startDay = start.getUTCDate(); // Use getUTCDate
    const endDay = end.getUTCDate();   // Use getUTCDate
    const year = start.getUTCFullYear(); // Use getUTCFullYear

    if (startDateStr === endDateStr) {
      // Single day
      return start.toLocaleDateString('en-US', options);
    } else if (start.getUTCMonth() === end.getUTCMonth() && start.getUTCFullYear() === end.getUTCFullYear()) {
      // Same month
      return `${startMonth} ${startDay}-${endDay}, ${year}`;
    } else {
      // Different months
      const endMonth = end.toLocaleDateString('en-US', { month: 'long', timeZone: 'UTC' });
      const endYear = end.getUTCFullYear();

      if(year !== endYear) {
        return `${start.toLocaleDateString('en-US', options)} - ${end.toLocaleDateString('en-US', options)}`;
      } else {
        return `${startMonth} ${startDay} - ${endMonth} ${endDay}, ${year}`;
      }
    }
  } catch (e) {
    console.error("Error formatting inclusive dates:", e, startDateStr, endDateStr);
    return "Invalid Date Range";
  }
}

/**
 * Helper function to fix sharing on a specific PDF file
 * Call this manually if a file isn't shared properly
 */
function fixPDFSharing(fileId) {
  try {
    // Try Drive API first
    try {
      Drive.Permissions.insert(
        {
          'type': 'anyone',
          'role': 'reader',
          'withLink': true
        },
        fileId,
        {
          'supportsAllDrives': true // Add this if using Shared Drives
        }
      );
      return { success: true, message: 'File shared successfully using Drive API', fileId: fileId };
    } catch (e1) {
      console.error('Drive API failed during fix:', e1);
      // Fallback to DriveApp
      const file = DriveApp.getFileById(fileId);
      file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
      return { success: true, message: 'File shared successfully using DriveApp fallback', fileId: fileId };
    }
  } catch (error) {
    console.error('Failed to fix sharing for ' + fileId, error);
    return { success: false, message: 'Failed to share file: ' + error.toString(), fileId: fileId };
  }
}

/**
 * Fixes sharing for all generated PDFs in the database
 * Run this if you need to fix sharing on existing certificates
 */
function fixAllPDFSharing() {
  const ui = SpreadsheetApp.getUi();
  const confirmation = ui.alert(
    'Confirm Batch Fix',
    'This will attempt to fix sharing permissions for ALL generated PDFs in the database. This may take a long time. Do you want to proceed?',
    ui.ButtonSet.YES_NO
  );

  if (confirmation !== ui.Button.YES) {
    return;
  }

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Requests');
  const data = sheet.getDataRange().getValues();
  let fixed = 0;
  let failed = 0;
  let skipped = 0;

  for (let i = 1; i < data.length; i++) {
    const pdfUrl = data[i][18]; // Column S: GeneratedPDF_URL
    const status = data[i][13]; // Column N: Status

    // Only fix 'Approved' certificates that have a URL
    if (status === 'Approved' && pdfUrl && pdfUrl.includes('drive.google.com')) {
      // Extract file ID from URL
      // Handles both '/view' and '/uc' formats
      const match = pdfUrl.match(/id=([^\/&]+)|file\/d\/([^\/&]+)/);

      if (match && (match[1] || match[2])) {
        const fileId = match[1] || match[2];
        const result = fixPDFSharing(fileId);

        if (result.success) {
          // **Also update the URL to the new format**
          const newPdfUrl = 'https://drive.google.com/uc?export=view&id=' + fileId;
          if (pdfUrl !== newPdfUrl) {
            sheet.getRange(i + 1, 19).setValue(newPdfUrl);
          }
          fixed++;
          console.log('Fixed: ' + fileId);
        } else {
          failed++;
          console.error('Failed: ' + fileId + ' - ' + result.message);
        }

        // Sleep to avoid rate limiting
        Utilities.sleep(1000); // 1 second pause
      }
    } else {
      skipped++;
    }
  }

  console.log(`Fix complete. Fixed: ${fixed}, Failed: ${failed}, Skipped: ${skipped}`);
  ui.alert('Sharing Fix Complete',
    `Processed all rows.\n\nFixed: ${fixed}\nFailed: ${failed}\nSkipped (not applicable): ${skipped}`,
    ui.ButtonSet.OK);
}

/**
 * Initialize the database sheets with headers
 * Run this once to set up the spreadsheet structure
 */
function initializeDatabase() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();

  // Create or get Requests sheet
  let requestsSheet = ss.getSheetByName('Requests');
  if (!requestsSheet) {
    requestsSheet = ss.insertSheet('Requests');
  }

  // Set headers for Requests
  const requestsHeaders = [
    'Timestamp', 'RegistrationNo', 'DisplayName', 'LastName', 'FirstName',
    'MiddleInitial', 'Suffix', 'Position', 'Office', 'StartDate', 'EndDate',
    'InclusiveDates', 'Purpose', 'Status', 'SubmittedBy', 'ApprovedBy',
    'IssueDate', 'VerificationURL', 'GeneratedPDF_URL'
  ];
  requestsSheet.getRange(1, 1, 1, requestsHeaders.length).setValues([requestsHeaders]);
  requestsSheet.getRange(1, 1, 1, requestsHeaders.length).setFontWeight('bold');

  // Create or get Offices sheet
  let officesSheet = ss.getSheetByName('Offices');
  if (!officesSheet) {
    officesSheet = ss.insertSheet('Offices');
  }

  officesSheet.getRange(1, 1).setValue('Office Name');
  officesSheet.getRange(1, 1).setFontWeight('bold');

  // Add sample offices
  const sampleOffices = [
    ['Human Resources'],
    ['Finance'],
    ['IT Department'],
    ['Operations'],
    ['Marketing']
  ];
  officesSheet.getRange(2, 1, sampleOffices.length, 1).setValues(sampleOffices);

  // Create or get Signatories sheet
  let signatoriesSheet = ss.getSheetByName('Signatories');
  if (!signatoriesSheet) {
    signatoriesSheet = ss.insertSheet('Signatories');
  }

  const signatoryHeaders = ['Name', 'Position'];
  signatoriesSheet.getRange(1, 1, 1, 2).setValues([signatoryHeaders]);
  signatoriesSheet.getRange(1, 1, 1, 2).setFontWeight('bold');

  // Add default signatory
  signatoriesSheet.getRange(2, 1, 1, 2).setValues([['John Doe', 'Director, RMS']]);

  SpreadsheetApp.getUi().alert('Database initialized successfully!');
}


