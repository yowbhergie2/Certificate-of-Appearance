/**
 * CA REQUEST PORTAL - Code.gs
 * This is the public-facing spreadsheet accessible to all employees.
 * It only provides a menu to launch the request form modal.
 * All data is saved to the private RMS CA Database.
 */

// Configuration - UPDATE THIS WITH YOUR RMS DATABASE SPREADSHEET ID
const RMS_DATABASE_ID = '1M-qwsQZri0cMB5NNtq4AN960nScexBq72AfsDw0yXKg';
const ADMIN_EMAIL = 'ad.dpwhro2@gmail.com'; // Update with actual admin email

/**
 * Creates custom menu when spreadsheet opens
 */
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('ðŸ“‹ Certificate of Appearance')
    .addItem('Request Certificate', 'showRequestModal')
    .addToUi();
}

/**
 * Shows the request form modal
 */
function showRequestModal() {
  const html = HtmlService.createHtmlOutputFromFile('RequestModal')
    .setWidth(600)
    .setHeight(700);
  SpreadsheetApp.getUi().showModalDialog(html, 'Request Certificate of Appearance');
}

/**
 * Gets list of offices from RMS Database
 */
function getOffices() {
  try {
    const rmsDb = SpreadsheetApp.openById(RMS_DATABASE_ID);
    const officesSheet = rmsDb.getSheetByName('Offices');
    
    if (!officesSheet) {
      throw new Error('Offices sheet not found in RMS Database');
    }
    
    const data = officesSheet.getRange(2, 1, officesSheet.getLastRow() - 1, 1).getValues();
    const offices = data.map(row => row[0]).filter(office => office !== '');
    
    return offices;
  } catch (error) {
    console.error('Error fetching offices:', error);
    throw new Error('Unable to fetch offices. Please contact the administrator.');
  }
}

/**
 * Processes the submitted request form
 * @param {Object} formData - The form data from the modal
 * @returns {Object} Success or error response
 */
function processRequestForm(formData) {
  try {
    // Connect to RMS Database
    const rmsDb = SpreadsheetApp.openById(RMS_DATABASE_ID);
    const requestsSheet = rmsDb.getSheetByName('Requests');
    
    if (!requestsSheet) {
      throw new Error('Requests sheet not found in RMS Database');
    }
    
    // Format the name into DisplayName
    // Note: formData is already in uppercase from the client-side
    const displayName = formatDisplayName(formData);
    
    // Format dates into InclusiveDates
    const inclusiveDates = formatInclusiveDates(formData.startDate, formData.endDate);
    
    // Check for duplicates
    if (isDuplicate(requestsSheet, displayName, formData.position, formData.office, inclusiveDates)) {
      return {
        success: false,
        message: 'A similar request already exists. Please check your pending requests or contact the administrator.'
      };
    }
    
    // Generate Registration Number
    const registrationNo = generateRegistrationNo(requestsSheet);
    
    // Prepare the row data
    const timestamp = new Date();
    const submittedBy = Session.getActiveUser().getEmail();
    
    const rowData = [
      timestamp,                    // A: Timestamp
      registrationNo,               // B: RegistrationNo
      displayName,                  // C: DisplayName
      formData.lastName,            // D: LastName
      formData.firstName,           // E: FirstName
      formData.middleInitial || '', // F: MiddleInitial
      formData.suffix || '',        // G: Suffix
      formData.position,            // H: Position
      formData.office,              // I: Office
      formData.startDate,           // J: StartDate
      formData.endDate,             // K: EndDate
      inclusiveDates,               // L: InclusiveDates
      formData.purpose,             // M: Purpose
      'Pending',                    // N: Status
      submittedBy,                  // O: SubmittedBy
      '',                           // P: ApprovedBy
      '',                           // Q: IssueDate
      '',                           // R: QRCodeLink
      '',                           // S: VerificationURL
      ''                            // T: GeneratedPDF_URL
    ];
    
    // Append to Requests sheet
    requestsSheet.appendRow(rowData);
    
    // Send notification email to admin
    sendAdminNotification(displayName, formData.office, registrationNo, inclusiveDates, formData.purpose);
    
    // Updated success message with line break and green, bold tag
    const successMessage = `Your Certificate of Appearance request has been submitted successfully!<br><span style="font-weight: bold; color: #16a34a;">Registration No: ${registrationNo}</span>`;

    return {
      success: true,
      message: successMessage
    };
    
  } catch (error) {
    console.error('Error processing request:', error);
    return {
      success: false,
      message: 'An error occurred while processing your request. Please try again or contact the administrator.'
    };
  }
}

/**
 * Formats the name into DisplayName format
 * Example: "JUAN A. DELA CRUZ, JR."
 * Assumes inputs (lastName, firstName, etc.) are already uppercase.
 */
function formatDisplayName(formData) {
  let displayName = formData.lastName;
  
  if (formData.firstName) {
    displayName = formData.firstName + ' ';
    if (formData.middleInitial) {
      displayName += formData.middleInitial + '. ';
    }
    displayName += formData.lastName;
  }
  
  if (formData.suffix) {
    displayName += ', ' + formData.suffix;
  }
  
  return displayName;
}

/**
 * Formats dates into InclusiveDates string
 * Examples: "Oct 29-31, 2025" or "Oct 29, 2025"
 */
function formatInclusiveDates(startDate, endDate) {
  const start = new Date(startDate);
  const end = new Date(endDate);
  
  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  
  const startMonth = months[start.getMonth()];
  const startDay = start.getDate();
  const endDay = end.getDate();
  const year = start.getFullYear();
  
  if (startDate === endDate) {
    // Single day
    return `${startMonth} ${startDay}, ${year}`;
  } else if (start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear()) {
    // Same month
    return `${startMonth} ${startDay}-${endDay}, ${year}`;
  } else {
    // Different months
    const endMonth = months[end.getMonth()];
    const endYear = end.getFullYear();
    return `${startMonth} ${startDay}, ${year} - ${endMonth} ${endDay}, ${year}`;
  }
}

/**
 * Checks for duplicate requests
 */
function isDuplicate(sheet, displayName, position, office, inclusiveDates) {
  const data = sheet.getDataRange().getValues();
  
  // Skip header row
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    // Check columns: DisplayName (C=2), Position (H=7), Office (I=8), InclusiveDates (L=11), Status (N=13)
    if (row[2] === displayName && 
        row[7] === position && 
        row[8] === office && 
        row[11] === inclusiveDates &&
        row[13] === 'Pending') {
      return true;
    }
  }
  
  return false;
}

/**
 * Generates a unique Registration Number
 * Format: B2025-10-29-0001
 */
function generateRegistrationNo(sheet) {
  const today = new Date();
  const year = today.getFullYear();
  const month = String(today.getMonth() + 1).padStart(2, '0');
  const day = String(today.getDate()).padStart(2, '0');
  
  const prefix = `B${year}-${month}-${day}`;
  
  // Get all registration numbers for today
  const data = sheet.getDataRange().getValues();
  let maxSequence = 0;
  
  for (let i = 1; i < data.length; i++) {
    const regNo = data[i][1]; // Column B
    if (regNo && regNo.startsWith(prefix)) {
      const sequence = parseInt(regNo.split('-')[3]);
      if (sequence > maxSequence) {
        maxSequence = sequence;
      }
    }
  }
  
  const newSequence = String(maxSequence + 1).padStart(4, '0');
  return `${prefix}-${newSequence}`;
}

/**
 * Sends email notification to admin
 */
function sendAdminNotification(displayName, office, registrationNo, inclusiveDates, purpose) {
  try {
    const subject = `New CA Request: ${registrationNo}`;
    const plainTextBody = `A new Certificate of Appearance request has been submitted.\n\n` +
                 `Registration No: ${registrationNo}\n` +
                 `Name: ${displayName}\n` +
                 `Office: ${office}\n` +
                 `Inclusive Dates: ${inclusiveDates}\n` +
                 `Purpose: ${purpose}\n\n` +
                 `Please review this request in the RMS Admin Panel.`;

    const htmlBody = `
      <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0;">
        <div style="max-width: 600px; margin: 20px auto; background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.05); border: 1px solid #e2e8f0;">
          <!-- Header -->
          <div style="background-color: #4299e1; color: white; padding: 20px; border-top-left-radius: 8px; border-top-right-radius: 8px;">
            <h2 style="margin: 0; font-size: 24px;">New Certificate of Appearance Request</h2>
          </div>
          
          <!-- Content -->
          <div style="padding: 24px;">
            <p style="font-size: 16px; color: #4a5568;">A new Certificate of Appearance request has been submitted.</p>
            
            <!-- Details Card -->
            <div style="background-color: #f7fafc; border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px; margin-top: 20px;">
              <table style="width: 100%; border-collapse: collapse;">
                <tbody>
                  <tr style="border-bottom: 1px solid #e2e8f0;">
                    <td style="padding: 12px 0; font-size: 16px; color: #718096; width: 150px;">Registration No:</td>
                    <td style="padding: 12px 0; font-size: 16px; color: #2d3748; font-weight: 600;">${registrationNo}</td>
                  </tr>
                  <tr style="border-bottom: 1px solid #e2e8f0;">
                    <td style="padding: 12px 0; font-size: 16px; color: #718096;">Name:</td>
                    <td style="padding: 12px 0; font-size: 16px; color: #2d3748;">${displayName}</td>
                  </tr>
                  <tr style="border-bottom: 1px solid #e2e8f0;">
                    <td style="padding: 12px 0; font-size: 16px; color: #718096;">Office:</td>
                    <td style="padding: 12px 0; font-size: 16px; color: #2d3748;">${office}</td>
                  </tr>
                  <tr style="border-bottom: 1px solid #e2e8f0;">
                    <td style="padding: 12px 0; font-size: 16px; color: #718096;">Inclusive Dates:</td>
                    <td style="padding: 12px 0; font-size: 16px; color: #2d3748;">${inclusiveDates}</td>
                  </tr>
                  <tr>
                    <td style="padding: 12px 0; font-size: 16px; color: #718096; vertical-align: top;">Purpose:</td>
                    <td style="padding: 12px 0; font-size: 16px; color: #2d3748;">${purpose}</td>
                  </tr>
                </tbody>
              </table>
            </div>
            
            <!-- Call to Action -->
            <div style="text-align: center; margin-top: 30px;">
              <p style="font-size: 16px; color: #4a5568;">Please review this request in the RMS Admin Panel.</p>
              <!-- Note: The link to the admin panel is not included as it's not available here, but you could add an <a> tag if you have a direct URL -->
            </div>
          </div>
          
          <!-- Footer -->
          <div style="background-color: #f7fafc; color: #718096; padding: 20px; text-align: center; font-size: 12px; border-bottom-left-radius: 8px; border-bottom-right-radius: 8px; border-top: 1px solid #e2e8f0;">
            <p style="margin: 0;">DPWH Regional Office II - Automated CA System</p>
          </div>
        </div>
      </div>
    `;
    
    MailApp.sendEmail({
      to: ADMIN_EMAIL,
      subject: subject,
      body: plainTextBody, // Fallback for email clients that don't support HTML
      htmlBody: htmlBody   // The new HTML styled email
    });

  } catch (error) {
    console.error('Error sending admin notification:', error);
    // Don't throw error - notification failure shouldn't stop the request
  }
}

