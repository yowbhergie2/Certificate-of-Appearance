<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    /* Added Tahoma font */
    body {
      font-family: "Tahoma", sans-serif;
    }
    .tab-active {
      background-color: #3b82f6;
      color: white;
    }
    .spinner {
      border: 3px solid #f3f3f3;
      border-top: 3px solid #3b82f6;
      border-radius: 50%;
      width: 30px;
      height: 30px;
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>
</head>
<body class="bg-gray-100">
  <div class="p-6">
    <!-- Tab Navigation -->
    <div class="bg-white rounded-t-lg shadow">
      <div class="flex border-b">
        <button onclick="switchTab('dashboard')" id="tab-dashboard" 
                class="tab-active px-6 py-3 font-medium transition">
          Dashboard
        </button>
        <button onclick="switchTab('pending')" id="tab-pending" 
                class="px-6 py-3 font-medium text-gray-600 hover:bg-gray-50 transition">
          Pending <span id="pendingCount" class="ml-2 px-2 py-1 bg-yellow-500 text-white text-xs rounded-full">0</span>
        </button>
        <button onclick="switchTab('approved')" id="tab-approved" 
                class="px-6 py-3 font-medium text-gray-600 hover:bg-gray-50 transition">
          Approved & Print
        </button>
        <button onclick="switchTab('settings')" id="tab-settings" 
                class="px-6 py-3 font-medium text-gray-600 hover:bg-gray-50 transition">
          Settings
        </button>
      </div>
    </div>
    
    <!-- Tab Content Container -->
    <div class="bg-white rounded-b-lg shadow p-6">
      
      <!-- Dashboard Tab -->
      <div id="content-dashboard" class="tab-content">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">Dashboard Overview</h2>
        
        <!-- Stats Cards -->
        <div class="grid grid-cols-3 gap-4 mb-8">
          <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-yellow-700 font-medium">Pending Requests</p>
                <p id="stat-pending" class="text-3xl font-bold text-yellow-800">0</p>
              </div>
              <svg class="w-12 h-12 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
          </div>
          
          <div class="bg-green-50 border border-green-200 rounded-lg p-4">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-green-700 font-medium">Approved</p>
                <p id="stat-approved" class="text-3xl font-bold text-green-800">0</p>
              </div>
              <svg class="w-12 h-12 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
          </div>
          
          <div class="bg-red-50 border border-red-200 rounded-lg p-4">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-red-700 font-medium">Rejected</p>
                <p id="stat-rejected" class="text-3xl font-bold text-red-800">0</p>
              </div>
              <svg class="w-12 h-12 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
          </div>
        </div>
        
        <!-- Top Offices -->
        <div>
          <h3 class="text-lg font-semibold text-gray-800 mb-4">Top 5 Requesting Offices</h3>
          <div id="topOffices" class="space-y-2">
            <!-- Will be populated dynamically -->
          </div>
        </div>
      </div>
      
      <!-- Pending Tab -->
      <div id="content-pending" class="tab-content hidden">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">Pending Requests</h2>
        <div id="pendingRequests" class="space-y-4">
          <!-- Will be populated dynamically -->
        </div>
      </div>
      
      <!-- Approved & Print Tab -->
      <div id="content-approved" class="tab-content hidden">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">Approved Requests</h2>
        <div id="approvedRequests" class="space-y-4">
          <!-- Will be populated dynamically -->
        </div>
      </div>
      
      <!-- Settings Tab -->
      <div id="content-settings" class="tab-content hidden">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">Settings</h2>
        
        <div class="bg-gray-50 p-6 rounded-lg max-w-2xl">
          <h3 class="text-lg font-semibold text-gray-800 mb-4">Update Signatory</h3>
          
          <form id="signatoryForm" onsubmit="handleSignatoryUpdate(event)">
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Signatory Name</label>
                <input type="text" id="signatoryName" required
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Position/Title</label>
                <input type="text" id="signatoryPosition" required
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
              </div>
              
              <div id="settingsMessage" class="hidden"></div>
              
              <button type="submit" 
                      class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition">
                Update Signatory
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg shadow-xl text-center">
      <div class="spinner mx-auto mb-4"></div>
      <p id="loadingText" class="text-gray-700 font-medium">Loading...</p>
    </div>
  </div>
  
  <script>
    let currentTab = 'dashboard';
    
    // Initialize on load
    window.onload = function() {
      loadDashboard();
      loadSignatory();
    };

    // Helper function to handle all server errors
    function handleAdminError(error) {
      hideLoading();
      alert('An error occurred: ' + error.message);
      console.error('Apps Script Error:', error);
    }
    
    function switchTab(tabName) {
      // Hide all content
      document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.add('hidden');
      });
      
      // Remove active class from all tabs
      document.querySelectorAll('[id^="tab-"]').forEach(tab => {
        tab.classList.remove('tab-active');
        tab.classList.add('text-gray-600', 'hover:bg-gray-50');
      });
      
      // Show selected content
      document.getElementById('content-' + tabName).classList.remove('hidden');
      
      // Add active class to selected tab
      const activeTab = document.getElementById('tab-' + tabName);
      activeTab.classList.add('tab-active');
      activeTab.classList.remove('text-gray-600', 'hover:bg-gray-50');
      
      currentTab = tabName;
      
      // Load data for the tab
      if (tabName === 'pending') {
        loadPendingRequests();
      } else if (tabName === 'approved') {
        loadApprovedRequests();
      }
    }
    
    function showLoading(message = 'Loading...') {
      document.getElementById('loadingText').textContent = message;
      document.getElementById('loadingOverlay').classList.remove('hidden');
    }
    
    function hideLoading() {
      document.getElementById('loadingOverlay').classList.add('hidden');
    }
    
    function loadDashboard() {
      showLoading('Loading dashboard...');
      google.script.run
        .withSuccessHandler(function(stats) {
          try {
            document.getElementById('stat-pending').textContent = stats.totalPending;
            document.getElementById('stat-approved').textContent = stats.totalApproved;
            document.getElementById('stat-rejected').textContent = stats.totalRejected;
            document.getElementById('pendingCount').textContent = stats.totalPending;
            
            const topOfficesDiv = document.getElementById('topOffices');
            topOfficesDiv.innerHTML = '';
            
            // FIX: Check if stats.topOffices is null or empty
            if (!stats.topOffices || stats.topOffices.length === 0) {
              topOfficesDiv.innerHTML = '<p class="text-gray-500">No data available</p>';
            } else {
              stats.topOffices.forEach(item => {
                const div = document.createElement('div');
                div.className = 'flex items-center justify-between bg-gray-50 p-3 rounded';
                div.innerHTML = `
                  <span class="text-gray-700">${item.office}</span>
                  <span class="px-3 py-1 bg-blue-100 text-blue-800 text-sm font-medium rounded">${item.count}</span>
                `;
                topOfficesDiv.appendChild(div);
              });
            }
          } catch (e) {
            console.error('Error rendering dashboard:', e);
            alert('A client-side error occurred while displaying dashboard: ' + e.message);
          } finally {
            hideLoading();
          }
        })
        .withFailureHandler(handleAdminError) // Added failure handler
        .getDashboardStats();
    }
    
    function loadPendingRequests() {
      showLoading('Loading pending requests...');
      google.script.run
        .withSuccessHandler(function(requests) {
          try {
            // DEBUG: Log what the server is returning
            console.log('Server response for getPendingRequests:', requests);
            
            const container = document.getElementById('pendingRequests');
            container.innerHTML = '';
            
            // FIX: Check if requests is null or empty
            if (!requests || requests.length === 0) {
              container.innerHTML = '<p class="text-gray-500 text-center py-8">No pending requests</p>';
            } else {
              requests.forEach(req => {
                const card = createRequestCard(req, 'pending');
                container.appendChild(card);
              });
            }
          } catch (e) {
            console.error('Error rendering pending requests:', e);
            alert('A client-side error occurred while displaying requests: ' + e.message);
          } finally {
            hideLoading();
          }
        })
        .withFailureHandler(handleAdminError) // Added failure handler
        .getPendingRequests();
    }
    
    function loadApprovedRequests() {
      showLoading('Loading approved requests...');
      google.script.run
        .withSuccessHandler(function(requests) {
          try {
            const container = document.getElementById('approvedRequests');
            container.innerHTML = '';
            
            // FIX: Check if requests is null or empty
            if (!requests || requests.length === 0) {
              container.innerHTML = '<p class="text-gray-500 text-center py-8">No approved requests</p>';
            } else {
              requests.forEach(req => {
                const card = createRequestCard(req, 'approved');
                container.appendChild(card);
              });
            }
          } catch (e) {
            console.error('Error rendering approved requests:', e);
            alert('A client-side error occurred while displaying requests: ' + e.message);
          } finally {
            hideLoading();
          }
        })
        .withFailureHandler(handleAdminError) // Added failure handler
        .getApprovedRequests();
    }
    
    function createRequestCard(req, type) {
      const card = document.createElement('div');
      card.className = 'bg-gray-50 border border-gray-200 rounded-lg p-4';
      
      let buttons = '';
      if (type === 'pending') {
        buttons = `
          <button onclick="approveRequest(${req.rowNumber}, '${req.registrationNo}')"
                  class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition mr-2">
            Approve
          </button>
          <button onclick="rejectRequest(${req.rowNumber})"
                  class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition">
            Reject
          </button>
        `;
      } else {
        buttons = `
          <button onclick="generateCertificate('${req.registrationNo}')"
                  class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition">
            Generate Certificate
          </button>
        `;
        if (req.pdfUrl) {
          buttons += `
            <a href="${req.pdfUrl}" target="_blank"
               class="ml-2 px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition inline-block">
              View PDF
            </a>
          `;
        }
      }
      
      card.innerHTML = `
        <div class="flex justify-between items-start">
          <div class="flex-1">
            <div class="flex items-center mb-2">
              <span class="font-semibold text-gray-800 text-lg">${req.displayName}</span>
              <span class="ml-3 px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded">${req.registrationNo}</span>
            </div>
            <p class="text-gray-600 text-sm"><strong>Position:</strong> ${req.position}</p>
            <p class="text-gray-600 text-sm"><strong>Office:</strong> ${req.office}</p>
            <p class="text-gray-600 text-sm"><strong>Dates:</strong> ${req.inclusiveDates}</p>
            <p class="text-gray-600 text-sm"><strong>Purpose:</strong> ${req.purpose}</p>
          </div>
          <div class="ml-4">
            ${buttons}
          </div>
        </div>
      `;
      
      return card;
    }
    
    function approveRequest(rowNumber, regNo) {
      if (!confirm('Approve this request?')) return;
      
      showLoading('Approving request...');
      google.script.run
        .withSuccessHandler(function(response) {
          hideLoading();
          if (response.success) {
            alert(response.message);
            loadDashboard();
            loadPendingRequests();
          } else {
            alert(response.message);
          }
        })
        .withFailureHandler(handleAdminError) // Added failure handler
        .approveRequest(rowNumber, regNo);
    }
    
    function rejectRequest(rowNumber) {
      if (!confirm('Reject this request?')) return;
      
      showLoading('Rejecting request...');
      google.script.run
        .withSuccessHandler(function(response) {
          hideLoading();
          if (response.success) {
            alert(response.message);
            loadDashboard();
            loadPendingRequests();
          } else {
            alert(response.message);
          }
        })
        .withFailureHandler(handleAdminError) // Added failure handler
        .rejectRequest(rowNumber);
    }
    
    function generateCertificate(regNo) {
      showLoading('Generating certificate...');
      google.script.run
        .withSuccessHandler(function(response) {
          hideLoading();
          if (response.success) {
            alert(response.message);
            if (response.pdfUrl) {
              window.open(response.pdfUrl, '_blank');
            }
            loadApprovedRequests();
          } else {
            alert(response.message);
          }
        })
        .withFailureHandler(handleAdminError) // Added failure handler
        .generateCertificate(regNo);
    }
    
    function loadSignatory() {
      google.script.run
        .withSuccessHandler(function(signatory) {
          document.getElementById('signatoryName').value = signatory.name;
          document.getElementById('signatoryPosition').value = signatory.position;
        })
        .withFailureHandler(handleAdminError)
        .getSignatory();
    }
    
    function handleSignatoryUpdate(event) {
      event.preventDefault();
      
      const name = document.getElementById('signatoryName').value;
      const position = document.getElementById('signatoryPosition').value;
      
      showLoading('Updating signatory...');
      google.script.run
        .withSuccessHandler(function(response) {
          hideLoading();
          const messageDiv = document.getElementById('settingsMessage');
          messageDiv.className = response.success 
            ? 'p-3 bg-green-100 text-green-700 rounded' 
            : 'p-3 bg-red-100 text-red-700 rounded';
          messageDiv.textContent = response.message;
          messageDiv.classList.remove('hidden');
          
          setTimeout(() => {
            messageDiv.classList.add('hidden');
          }, 3000);
        })
        .withFailureHandler(handleAdminError) // Added failure handler
        .updateSignatory(name, position);
    }
  </script>
</body>
</html>

